from optparse import OptionParser

import csv
import numpy as np

from sklearn.cluster import KMeans

def set_dataset(row):
    return {
        'name': row[0],
        'type': int(row[1]),
        'feature': np.array(row[2:])
    }


def main(train_file, minimum_cluster, maximum_cluster, output_file):
    minimum_cluster = 2
    maximum_cluster = 3 
    tp = 0
    fp = 0 
    tn = 0 
    fn = 0

    dataset = {}
    with open(train_file, 'r') as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quoting=csv.QUOTE_MINIMAL)
        for index, row in enumerate(reader):
            if index > 0:
                dataset[index] = set_dataset(row)
                # break
    feature = (np.array([row[1]['feature'] for row in dataset.items()]))
    label = (np.array([row[1]['type'] for row in dataset.items()]))

    for i in range(minimum_cluster, maximum_cluster+1):
        kmeans = KMeans(n_clusters=2, random_state=0).fit(X)
        result = kmeans.labels_.tolist()





if __name__ == '__main__':

    opt_parser = OptionParser()
    opt_parser.add_option(
        '-c', '--csv', dest='train_file',
        help='csv input feature table.')
    opt_parser.add_option(
        '--min', dest='minimum_cluster',
        help='the number of minimum cluster (default: 2)')
    opt_parser.add_option(
        '--max', dest='maximum_cluster',
        help='the number of maximum cluster (default: 3)')
    opt_parser.add_option(
        '--output', dest='output_file',
        help='.csv output filename. silhouette result')

    options, _ = opt_parser.parse_args()

    main(options.train_file, options.minimum_cluster, options.maximum_cluster, options.output_file)
