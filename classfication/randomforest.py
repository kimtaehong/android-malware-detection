# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd

from optparse import OptionParser
from os import makedirs
from os.path import exists, dirname, join, realpath
from sklearn.ensemble import RandomForestClassifier

from context import *
from classfication.log import log

predict_result = list()


def main(train_file_path, test_file_path):
    current_module_path = dirname(realpath(__file__))
    output_base_dir = join(current_module_path, 'exported/randomforest')
    if exists(output_base_dir) is False:
        makedirs(output_base_dir)
    fp1 = open(join(output_base_dir, "RandomForest_Result.csv"), 'w')
    fp1.write("Hash_Name" + "," + "Type" + "," + "Cluster_No." + "\n")

    # load train data
    train_pre = pd.read_csv(train_file_path)
    train_data_set = train_pre.values
    train_hash_Name = train_data_set[:, 0]
    train_type = np.array(list(train_data_set[:, 1]))
    train_feature = np.array(list(train_data_set[:, 2:]))

    # load test data
    test_pre = pd.read_csv(test_file_path)
    test_data_set = test_pre.values
    test_hash_name = test_data_set[:, 0]
    test_type = np.array(list(test_data_set[:, 1]))
    test_feature = np.array(list(test_data_set[:, 2:]))

    clf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)
    clf.fit(train_feature, train_type)

    for test_count in range(0, len(test_hash_name)):
        each_result = clf.predict([test_feature[test_count]])
        fp1.write(str(test_hash_name[test_count]) + "," + str(each_result)[1:-1] + "\n")


if __name__ == "__main__":
    opt_parser = OptionParser()
    opt_parser.add_option(
        '-t', '--train_file_path', dest='train_file',
        help='csv input feature table.')
    opt_parser.add_option(
        '-f', '--test_file_path', dest='test_file',
        help='csv input feature table.')
    options, _ = opt_parser.parse_args()
    if options.test_file is None or exists(options.test_file) is False:
        opt_parser.print_help()
        exit(-1)
    if options.train_file is None or exists(options.train_file) is False:
        opt_parser.print_help()
        exit(-1)
    main(options.train_file, options.test_file)