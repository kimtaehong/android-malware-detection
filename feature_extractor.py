import glob
from os.path import join, dirname, realpath, basename
from pickle import loads
from csv import writer, QUOTE_MINIMAL
from optparse import OptionParser

from multiprocessing import Queue, Pool, cpu_count

from androguard.misc import *

from log import log


data_queue = Queue()


def analyze_apk_file(apk_file_path: str):
    """Analyze APK file."""
    a, _, _ = AnalyzeAPK(apk_file_path)
    return a.get_permissions()


def extract_feature(file):
    file_name = basename(file)
    log().info("analyzing file: {}".format(file_name))
    permissions = analyze_apk_file(file)
    res = {}

    for feature in features:
        res.setdefault(feature, 0)

    for permission in permissions:
        try:
            res[permission] = 1
        except:
            pass

    p = [0] * len(features)
    for idx in range(len(features)):
        p[idx] = res[features[idx]]

    log().info("{} file feature {}".format(file_name, p))

    return p, file_name


def process_file(data):
    global data_queue
    file, file_type = data
    p, file_name = extract_feature(file)
    p.insert(0, file_name)
    p.insert(1, file_type)

    data_queue.put(p)


if __name__ == '__main__':
    opt_parser = OptionParser()
    opt_parser.set_defaults(inmemory=False, debug=False, UseLocalTimezone=True, UseGUI=False)
    opt_parser.add_option('-t', '--train-data-path',
                          dest='train_data_path',
                          help='Input train data path')

    options, args = opt_parser.parse_args()
    if options.train_data_path is None:
        opt_parser.print_help()
        exit(-1)

    current_module_path = dirname(realpath(__file__))
    with open(join(current_module_path, 'classifier/features.pkl'), 'rb') as file_object:
        features = loads(file_object.read())

    log().info('load {} features'.format(len(features)))

    # set train csv file
    csv_file_object = open('train.csv', 'w')
    csv_writer = writer(csv_file_object, delimiter=',', quoting=QUOTE_MINIMAL)

    csv_headers = features.copy()
    csv_headers.insert(0, 'name')
    csv_headers.insert(1, 'type')

    csv_writer.writerow(csv_headers)

    malware_data_path = join(options.train_data_path, '1-malware')

    pool = Pool(processes=cpu_count() * 2)
    pool.map(
        process_file,
        [[filepath, 1] for filepath in glob.glob('{}/*.vir'.format(malware_data_path))[:100]])

    normal_data_path = join(options.train_data_path, '0-normal')

    pool.map(
        process_file,
        [[filepath, 0] for filepath in glob.glob('{}/*.vir'.format(normal_data_path))[:100]])

    while not data_queue.empty():
        csv_writer.writerow(data_queue.get())

    log().info('Successfully done:-')
    csv_file_object.close()
